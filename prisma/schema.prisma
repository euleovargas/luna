// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Enum para os tipos de usuário
enum UserRole {
  ADMIN
  MANAGER
  SUPPORT
  INSTRUCTOR
  STUDENT
  USER
}

// Modelo de usuário
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]
  verifyToken    String?   @db.String
  lastEmailSent  DateTime?
  resendCount    Int       @default(0)
  resetToken     String?   @db.String
  role          UserRole  @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  dynamicForms   DynamicForm[]
  formResponses  FormResponse[]
  progress       Progress[]
  enrollments    ClassEnrollment[]

  @@map("users")
}

// Modelo para contas de autenticação social (Google, etc)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modelo para logs de segurança
model SecurityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // LOGIN_ATTEMPT, REGISTER_ATTEMPT, SUSPICIOUS_ACTIVITY
  ip        String
  userAgent String?
  details   String?  // JSON string com detalhes adicionais
  severity  String   // LOW, MEDIUM, HIGH
  timestamp DateTime @default(now())

  @@index([ip])
  @@map("security_logs")
}

// Modelo para blacklist de IPs
model BlockedIP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ip          String   @unique
  reason      String?
  isPermanent Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  @@map("blocked_ips")
}

// Modelo para rate limiting
model RateLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   // Formato: tipo:ip:path
  timestamp DateTime @default(now())

  @@index([key, timestamp])
  @@map("rate_limits")
}

// Enum para tipos de campos do formulário
enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  SELECT
  CHECKBOX
  RADIO
}

// Modelo para templates de formulários dinâmicos
model DynamicForm {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdBy   String    @db.ObjectId
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fields      FormField[]
  responses   FormResponse[]
  user        User      @relation(fields: [createdBy], references: [id])

  @@map("dynamic_forms")
}

// Modelo para campos do formulário
model FormField {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  formId      String    @db.ObjectId
  type        FieldType
  label       String
  description String?
  required    Boolean   @default(false)
  order       Int
  options     String?   // JSON string para campos SELECT, RADIO, CHECKBOX
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  form        DynamicForm    @relation(fields: [formId], references: [id], onDelete: Cascade)
  responses   FieldResponse[]

  @@map("form_fields")
}

// Modelo para respostas do formulário
model FormResponse {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  formId      String    @db.ObjectId
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  form        DynamicForm      @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields      FieldResponse[]

  @@map("form_responses")
}

// Modelo para respostas dos campos
model FieldResponse {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  responseId      String    @db.ObjectId
  fieldId         String    @db.ObjectId
  value           String    // Valor da resposta
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  response        FormResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field           FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@map("field_responses")
}

// Modelos para o sistema de cursos
model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  modules     Module[]
  classes     Class[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("courses")
}

model Module {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String    @db.ObjectId
  name        String
  description String?
  order       Int
  lessons     Lesson[]
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Lesson {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  moduleId    String    @db.ObjectId
  name        String
  description String?
  videoUrl    String?
  videoId     String?
  order       Int
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    Progress[]

  @@map("lessons")
}

model Progress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  lessonId    String    @db.ObjectId
  percentage  Float     @default(0)
  completed   Boolean   @default(false)
  lastPosition Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Class {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String    @db.ObjectId
  name        String
  startDate   DateTime
  endDate     DateTime?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students    ClassEnrollment[]

  @@map("classes")
}

model ClassEnrollment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  classId     String    @db.ObjectId
  userId      String    @db.ObjectId
  enrolledAt  DateTime  @default(now())
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@map("class_enrollments")
}
