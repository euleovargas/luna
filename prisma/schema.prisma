// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum para os tipos de usuário
enum UserRole {
  ADMIN
  MANAGER
  USER
}

// Modelo de usuário
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?   // Opcional porque pode usar login social
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  verifyToken   String?   @unique
  lastEmailSent DateTime?  // Novo campo para controlar o último envio
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// Modelo para contas de autenticação social (Google, etc)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modelo para tokens de verificação (email, reset de senha)
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo para logs de segurança
model SecurityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // LOGIN_ATTEMPT, REGISTER_ATTEMPT, SUSPICIOUS_ACTIVITY
  ip        String
  userAgent String?
  details   String?  // JSON string com detalhes adicionais
  severity  String   // LOW, MEDIUM, HIGH
  timestamp DateTime @default(now())

  @@index([ip])
  @@map("security_logs")
}

// Modelo para blacklist de IPs
model BlockedIP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ip          String   @unique
  reason      String
  blockedAt   DateTime @default(now())
  expiresAt   DateTime?
  isPermanent Boolean  @default(false)

  @@map("blocked_ips")
}
